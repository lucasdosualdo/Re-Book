generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookStatus {
  id        Int         @id @default(autoincrement())
  status    String
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @default(now()) @db.Timestamp(6)
  userBooks userBooks[]
}

model books {
  id            String      @id
  title         String
  author        String?
  category      String?
  description   String?
  cover         String?
  rating        Int?
  pages         Int?
  language      String?
  publishedDate String?
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  updatedAt     DateTime    @default(now()) @db.Timestamp(6)
  comments      comments[]
  ratings       ratings[]
  userBooks     userBooks[]
}

model comments {
  id        Int      @id @default(autoincrement())
  comment   String
  userId    Int
  bookId    String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  books     books    @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model libraries {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  picture   String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("profile")
}

model sessions {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  valid     Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(25)
  email     String      @unique @db.VarChar(50)
  password  String      @unique
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @default(now()) @db.Timestamp(6)
  comments  comments[]
  libraries libraries[]
  profile   profile?
  ratings   ratings[]
  sessions  sessions[]
  userBooks userBooks[]
}

model ratings {
  id        Int         @id @default(autoincrement())
  userId    Int
  bookId    String
  rating    Int
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @default(now()) @db.Timestamp(6)
  books     books       @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userBooks userBooks[]
}

model userBooks {
  id           Int        @id @default(autoincrement())
  review       String?
  userId       Int
  bookId       String
  bookStatusId Int
  ratingId     Int?
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @default(now()) @db.Timestamp(6)
  books        books      @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bookStatus   bookStatus @relation(fields: [bookStatusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ratings      ratings?   @relation(fields: [ratingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
